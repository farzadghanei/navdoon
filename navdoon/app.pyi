from typing import Dict, IO, AnyStr, Iterable, Union, List, Tuple
from logging import Logger
from argparse import Namespace
from navdoon.destination import AbstractDestination
from navdoon.collector import  AbstractCollector
from navdoon.server import Server


ConfigurationValue = Union[AnyStr, float, bool, None]
Configurations = Dict[AnyStr, ConfigurationValue]
Arguments = Iterable[AnyStr]


def parse_config_file(file_: IO) -> Configurations: ...
def main(args: Arguments) -> int: ...
def default_syslog_socket() -> str: ...


class App(object):
    def __init__(self, args: Arguments) -> None: ...
    def __del__(self) -> None: ...
    @staticmethod
    def get_description() -> AnyStr: ...
    @staticmethod
    def get_default_config() -> Configurations: ...
    def get_args(self) -> Arguments: ...
    def get_config(self) -> Configurations: ...
    def get_logger(self) -> Logger: ...
    def create_destinations(self) -> List[AbstractDestination]: ...
    def create_collectors(self) -> List[AbstractCollector]: ...
    def _create_socket_server_collectors(self, addresses: str, socket_type: int): ...
    def create_server(self) -> Server: ...
    def run(self) -> None: ...
    def shutdown(self, timeout:int) -> None: ...
    def reload(self) -> None: ...
    def _configure_server(self, server: Server) -> Server: ...
    def _configure_socket_server_collector(self, collector: AbstractCollector, host=str, port=int) -> AbstractCollector: ...
    def _configure(self, args: Arguments) -> None: ...
    def _parse_args(self, args: Arguments) -> Namespace: ...
    def _register_signal_handlers(self) -> None: ...
    def _handle_signal_int(self) -> None: ...
    def _handle_signal_term(self) -> None: ...
    def _handle_signal_hup(self) -> None: ...
    def _create_logger(self) -> Logger: ...
    def _close_logger(self) -> None: ...
    @staticmethod
    def get_addresses_with_unique_ports(addresses: str) -> List[Tuple[str, int]]: ...
