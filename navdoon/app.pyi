from typing import Dict, io, AnyStr, Iterable, Union, List
from io import FileIO
from logging import Logger
from argparse import Namespace
from navdoon.destination import Graphite, Stream, Stdout
from navdoon.server import Server
from navdoon.destination import Stdout, Graphite

Boolean = Union[True, False]
ConfigurationValue = Union[AnyStr, float, Boolean, None]
Configurations = Dict[AnyStr, ConfigurationValue]
Arguments = Iterable[AnyStr]
Destination = Union[Graphite, Stream, Stdout]
IO = Union[io.IO, FileIO]

def parse_config_file(file_: IO) -> Configurations: ...
def main(args: Arguments) -> int: ...

class App(object):
    def __init__(self, args: Arguments) -> None: ...
    def __del__(self) -> None: ...
    @staticmethod
    def get_description() -> AnyStr: ...
    @staticmethod
    def get_default_config() -> Configurations: ...
    def get_args(self) -> Arguments: ...
    def get_config(self) -> Configurations: ...
    def get_logger(self) -> Logger: ...
    def get_destinations(self) -> List[Destination]: ...
    def create_server(self) -> Server: ...
    def run(self) -> None: ...
    def shutdown(self) -> None: ...
    def reload(self) -> None: ...
    def _configure(self, args: Arguments) -> None: ...
    def _parse_args(self, args: Arguments) -> Namespace: ...
    def _register_signal_handlers(self) -> None: ...
    def _handle_signal_int(self) -> None: ...
    def _handle_signal_term(self) -> None: ...
    def _handle_signal_hup(self) -> None: ...
    def _create_logger(self) -> Logger: ...
    def _close_logger(self) -> None: ...