from typing import Union, Dict, Callable, List, Any, Sequence
from threading import Thread, Event
import multiprocessing
from navdoon.pystdlib import queue
from navdoon.utils.common import LoggerMixIn

Queue = Union[queue.Queue, multiprocessing.Queue]

def available_cpus() -> int : ...
def os_syslog_socket() -> str: ...


class WorkerThread(Thread):
    def __init__(self, queue: Queue, stop_event: Event, results: Dict) -> None: ...
    def _consume_queue(self) -> None: ...
    def _run_task_from_queue(self, timeout=None) -> None: ...
    def run(self) -> None: ...


class TemporaryWorkerThread(WorkerThread):
    def _consume_queue(self) -> None: ...


class ThreadPool(LoggerMixIn):
    def __init__(self, size: int) -> None: ...
    @property
    def size(self) -> int: ...
    @property
    def threads(self) -> List[Thread]: ...
    def initialize(self) -> 'ThreadPool': ...
    def do(self, func: Callable, *args, **kwargs) -> str: ...
    def is_done(self) -> bool: ...
    def wait_until_done(self) -> None: ...
    def stop(self, wait:bool=True, timeout: int=None) -> None: ...
    def get_result(self, task_id: str) -> Any: ...
    def _handle_task(self, task_id: str, func: Callable, args: Sequence, kwargs: Dict) -> None: ...
    def _create_worker_threads(self) -> None: ...
    def _start_worker_threads(self) -> 'ThreadPool': ...


class ExpandableThreadPool(ThreadPool):
    def __init__(self, size: int, workers_limit: int=0) -> None: ...
    @property
    def workers_limit(self) -> int: ...
    @workers_limit.setter
    def workers_limit(self, limit: int) -> None: ...
    @property
    def max_workers_count(self) -> int: ...
    @property
    def spawn_workers_threshold(self) -> None: ...
    @spawn_workers_threshold.setter
    def spawn_workers_threshold(self, threshold: float) -> None: ...
    def _start_worker_threads(self) -> 'ExpandableThreadPool': ...
    def _handle_task(self, task_id: str, func: Callable, args: Sequence, kwargs: Dict) -> None: ...
    def _can_spawn_temp_worker(self) -> bool: ...
    def _spawn_temp_worker(self) -> None: ...

