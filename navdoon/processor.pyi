from typing import AnyStr, Union, Dict, List, Tuple, Set as SetType, Iterable
from multiprocessing import Queue as multiprocessingQueue
from statsdmetrics import (Counter, Gauge, GaugeDelta, Set, Timer)
from navdoon.pystdlib import queue
from navdoon.utils.common import LoggerMixIn
from navdoon.destination import AbstractDestination


StatsMetricType = Union[Counter, Gauge, GaugeDelta, Set, Timer]
Queue = Union[queue.Queue, multiprocessingQueue]
Metrics = List[Tuple[AnyStr, float, float]]
Destinations = Iterable[AbstractDestination]

def validate_destinations(Destinations) -> None: ...
def validate_queue(Queue) -> None: ...

class QueueProcessor(LoggerMixIn):
    def __init__(self, queue_: Queue) -> None: ...
    @property
    def queue(self) -> Queue: ...
    @queue.setter
    def queue(self, queue_: Queue) -> None: ...
    @property
    def flush_interval(self) -> float: ...
    @flush_interval.setter
    def flush_interval(self, interval: float) -> None: ...
    def set_destinations(self, Destinations) -> "QueueProcessor": ...
    def init_destinations(self) -> bool: ...
    def destinations_initialized(self) -> bool: ...
    def clear_destinations(self) -> "QueueProcessor" : ...
    def is_processing(self) -> bool: ...
    def wait_until_processing(self, timeout: float): ...
    def process(self) -> None: ...
    def flush(self) -> None: ...
    def shutdown(self) -> None: ...
    def wait_until_shutdown(self, timeout: float) -> None: ...
    def _process_request(self, request: str) -> None: ...
    def _flush_metrics_queue_to_destination(self, queue_: Queue, destination: AbstractDestination) -> None: ...
    def _get_metrics_and_clear_shelf(self, timestamp: float) -> Metrics: ...
    def _stop_flush_threads(self) -> "QueueProcessor": ...
    def _clear_flush_threads(self) -> "QueueProcessor": ...


class StatsShelf(object):
    def __init__(self) -> None: ...
    def add(self, metric: StatsMetricType) -> None: ...
    def counters(self) -> Dict[str, float]: ...
    def sets(self) -> Dict[str, SetType]: ...
    def gauges(self) -> Dict[str, float]: ...
    def timers_data(self) -> List[float]: ...
    def timers(self) -> Dict[str, List[float]]: ...
    def clear(self) -> None: ...
    def _add_counter(self, counter: Counter) -> None: ...
    def _add_set(self, metric: Set) -> None: ...
    def _add_gauge(self, metric: Gauge) -> None: ...
    def _add_gauge_delta(self, metric: GaugeDelta) -> None: ...
    def _add_timer(self, metric: Timer) -> None: ...

